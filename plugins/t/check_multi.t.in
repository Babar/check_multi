#! @PERL@ -w -I ..
#
# Process Tests via check_multi
# thanks to Ton Voon for his persistency on testing ;)
#

use strict;
use Test::More;
use NPTest;

my $t;

#--- add $libexec_dir to PATH to be sure that plugins will be called from libexec_dir
my $libexec_dir="@libexecdir@";
my $plugin_path="@plugin_path@";
$ENV{PATH}="$libexec_dir:$plugin_path:$ENV{PATH}";

#--- check needed plugins for tests
my @plugins=(
	"check_procs",
	"echo",
	"@PERL@",
);
foreach my $plugin (@plugins) {
	my $path_to_plugin=`which $plugin`; chomp $path_to_plugin;
	if (! -x "$path_to_plugin") {
		plan skip_all => "tests because component $plugin not found or not executable as \'$path_to_plugin\'";
	}
}
my $path_to_check_procs=`which check_procs`; chomp $path_to_check_procs;
my $procs_string="";
my $procs_warning="";
my $procs_output=`$path_to_check_procs -w 10`; chomp $procs_output;
if ($procs_output=~/PROCS (\S+): \d+ (\S+)/) {
	$procs_warning=$1;
	$procs_string=$2;
} else {
	plan skip_all => "tests because check_procs output ($procs_output) does not match pattern (PROCS (\\S+): \\d+ (\\s+))";
}
plan tests => 44;

my $result;
my $testopts="-s dont_be_paranoid=1";

#-------------------------------------------------------------------------------
#--- check_multi version -------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -V"
);
print '-'x 80 ; print "\n";
print $result->output; print "\n";
print '-'x 80 ; print "\n";
is(
	$result->return_code, 
	3, 
	"check_multi version - RC3 - passed"
);
like(
	$result->output,
	'/^check_multi.*Revision.*Date.*Author: flackem.*\n'.
	'configure.*$/',
	"output correct - passed"
);

#-------------------------------------------------------------------------------
#--- simple OK output with 1 plugin --------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ procs ] = check_procs' $testopts"
);
is(
	$result->return_code, 
	0, 
	"default report option - RC0 - passed"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] procs PROCS OK: \d+ '.$procs_string.'|check_multi::check_multi::plugins=1 time=\d+$/',
	"output correct - passed"
);


#-------------------------------------------------------------------------------
#--- report option 0 -----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -r 0 -x 'command [ procs ] = check_procs' $testopts"
);
is(
	$result->return_code, 
	0, 
	"report option 0 (all states shown) - RC0 - passed"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 0 critical, 0 warning, 0 unknown, 1 ok\n'.
	'\[ 1\] procs PROCS OK: \d+ '.$procs_string.'$/',
	"output correct - passed"
);


#-------------------------------------------------------------------------------
#--- report option 1 -----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -r 1 -x 'command [ procs ] = check_procs -w 1' $testopts"
);
is(
	$result->return_code, 
	1, 
	"report option 1 (non-OK service names in state list) - RC1 - passed"
);
like(
	$result->output,
	'/^WARNING - 1 plugins checked, 1 warning \(procs\)\n'.
	'\[ 1\] procs PROCS '.$procs_warning.': \d+ '.$procs_string.'$/',
	"output correct - passed"
);


#-------------------------------------------------------------------------------
#--- report option 2 -----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -r 2 -x 'command [ procs ] = check_procs' $testopts"
);
is(
	$result->return_code, 
	0, 
	"report option 2 (HTML) - RC0 - passed"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 0 critical, 0 warning, 0 unknown, 1 ok\n'.
	'<SCRIPT LANGUAGE=\'JavaScript\'> function Toggle.*PROCS OK: \d+ '.$procs_string.'.*div>$/',
	"output correct - passed"
);

#-------------------------------------------------------------------------------
#--- report option 4 -----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -r 4 -x 'command [ procs ] = check_prox' $testopts"
);
is(
	$result->return_code, 
	3, 
	"report option 4 [error messages - stderr] - RC3 - passed"
);
like(
	$result->output,
	'/^UNKNOWN - 1 plugins checked, 0 critical, 0 warning, 1 unknown, 0 ok\n'.
	'\[ 1\] procs  \[ sh: check_prox: command not found RC was 127!\]$/',
	"output correct - passed"
);


#-------------------------------------------------------------------------------
#--- report option 8 -----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ eins ] = echo \"1|eins=1\"' -x 'command [ zwei ] = echo \"2|zwei=2\"' -r 8 $testopts"
);
is(
	$result->return_code, 
	0, 
	"report option 8 (check_multi perfdata) - RC0 - passed"
);
like(
	$result->output,
	'/^OK - 2 plugins checked, 0 critical, 0 warning, 0 unknown, 2 ok\n'.
	'\[ 1\] eins 1\n'.
	'\[ 2\] zwei 2\|check_multi::check_multi::plugins=2 time=\d+\.\d+ eins::echo::eins=1 zwei::echo::zwei=2 $/',
	"output correct - passed"
);

#-------------------------------------------------------------------------------
#--- report option 8 with extended_perddata ------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ eins ] = echo \"1|eins=1\"' -x 'command [ zwei ] = echo \"2|zwei=2\"' -r 8 -s extended_perfdata=1 $testopts"
);
is(
	$result->return_code, 
	0, 
	"report option 8 (check_multi perfdata) - RC0 - passed"
);
like(
	$result->output,
	'/^OK - 2 plugins checked, 0 critical, 0 warning, 0 unknown, 2 ok\n'.
	'\[ 1\] eins 1\n'.
	'\[ 2\] zwei 2\|check_multi::check_multi::plugins=2 time=\d+\.\d+ check_multi_extended::check_multi_extended::count_ok=2 count_warning=0 count_critical=0 count_unknown=0 overall_state=0 eins::echo::eins=1 zwei::echo::zwei=2 $/',
	"output correct - passed"
);

#-------------------------------------------------------------------------------
#--- report option 32 ----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ eins ] = echo \"1|eins=1\"' -x 'command [ zwei ] = echo \"2|zwei=2\"' -r 32 $testopts"
);
is(
	$result->return_code, 
	0, 
	"report option 32 (classical perfdata) - RC0 - passed"
);
like(
	$result->output,
	'/^OK - 2 plugins checked, 0 critical, 0 warning, 0 unknown, 2 ok\n'.
	'\[ 1\] eins 1\n'.
	'\[ 2\] zwei 2\|eins=1 zwei=2 $/',
	"output correct - passed"
);


#-------------------------------------------------------------------------------
#--- report option 64 ----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ eins ] = echo \"1|eins=1\"' -x 'command [ zwei ] = echo \"2|zwei=2\"' -r 64 $testopts"
);
is(
	$result->return_code, 
	0, 
	"report option 64 (state in front of output) - RC0 - passed"
);
like(
	$result->output,
	'/^OK - 2 plugins checked, 0 critical, 0 warning, 0 unknown, 2 ok\n'.
	'\[ 1\] eins OK 1\n'.
	'\[ 2\] zwei OK 2$/',
	"output correct - passed"
);


#-------------------------------------------------------------------------------
#--- report option 143 ---------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ eins ] = echo \"1|eins=1\"' -x 'command [ zwei ] = echo \"2|zwei=2\"' -r 143 $testopts"
);
is(
	$result->return_code, 
	0, 
	"report option 143 (HTML performance output with PNP link) - RC0 - passed"
);
like(
	$result->output,
	'/^check_multi OK - 2 plugins checked, 2 ok\n'.
	'.*<img src=.*Show performance chart.*'.
	'.*zwei::echo::zwei=2 $/',
	"output correct - passed"
);

#-------------------------------------------------------------------------------
#--- check_multi encode  (report option 16384) ---------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -r 16384 -x 'command [ encode ] = echo encode' $testopts",
);
is(
	$result->return_code, 
	0, 
	"report option 16384 - encode commands - RC0 - passed"
);
like(
	$result->output,
	'/command%20%5B%20encode%20%5D%20%3D%20echo%20encode%0A/',
	"output correct - passed"
);

#-------------------------------------------------------------------------------
#--- check_multi hide OK states (report option 32768) --------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -r 32768 -x 'command [ OK ] = (echo 0; exit 0)' -x 'command [ WARNING ] = (echo 1; exit 1)' $testopts",
);
is(
	$result->return_code, 
	1, 
	"report option 32768 - hide OK states - RC1 - passed"
);
like(
	$result->output,
	'/WARNING - 2 plugins checked, 0 critical, 1 warning, 0 unknown, 1 ok\n'.
	'\[ 2\] WARNING 1/',
	"output correct - passed"
);

#-------------------------------------------------------------------------------
#--- check_multi decode (of encoded command) -----------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -f command%20%5B%20encode%20%5D%20%3D%20echo%20encode%0A $testopts",
);
is(
	$result->return_code, 
	0, 
	"decode encoded command - RC0 - passed"
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok\n'. 
	'\[ 1\] encode encode\|check_multi::check_multi::plugins=1 time=\d+\.\d+/',
	"output correct - passed"
);

#-------------------------------------------------------------------------------
#--- check_multi recursive -----------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x \'command [ child1 ] = @PERL@ ../check_multi -x \"command [ grandchild1 ] = echo g1\" $testopts\' -r 1 $testopts"
);
is(
	$result->return_code, 
	0, 
	"recursive (check_multi calls check_multi) - RC0 - passed"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] child1 OK - 1 plugins checked, 1 ok\n'.
	' \[ 1\] grandchild1 g1$/',
	"output correct - passed"
);

#-------------------------------------------------------------------------------
#--- discarding perfdata  ------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ eins ] = echo \"eins|eins=1,1\"' -r 9 -s loose_perfdata=0 $testopts",
);
is(
	$result->return_code, 
	0, 
	"discards invalid perfdata - RC0 - passed"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok \[eins perfdata discarded for eins: bad UOM \',\' in data \'1,1\' \]\n'.
	'\[ 1\] eins eins\|check_multi::check_multi::plugins=1 time=\d+\.\d+ $/',
	"output correct - passed"
);

#-------------------------------------------------------------------------------
#--- accepting loose German perfdata -------------------------------------------
#-------------------------------------------------------------------------------
my $old_ENV_LANG=$ENV{LANG};
$ENV{LANG}="de_DE";
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ eins ] = echo \"eins|eins=1,1\"' -r 9 -s loose_perfdata=1 $testopts",
);
is(
	$result->return_code, 
	0, 
	"accepting loose perfdata - RC0 - passed"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] eins eins\|check_multi::check_multi::plugins=1 time=\d+\.\d+ eins::echo::eins=1\,1 $/',
	"output correct - passed"
);
$ENV{LANG}=$old_ENV_LANG;

#-------------------------------------------------------------------------------
#--- overloading ---------------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ eins ] = echo original' -x 'command [ eins ] = echo overloaded' -r 1 $testopts",
);
is(
	$result->return_code, 
	0, 
	"overloading commands - RC0 - passed"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] eins overloaded$/',
	"output correct - passed"
);
#-------------------------------------------------------------------------------
#--- killing me softly - checking signal handler -------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'eeval [ killing_me_HUPly ] = kill 1, \$\$;' -r 1 $testopts",
);
is(
	$result->return_code, 
	3, 
	"testing signal handler - RC0 - passed"
);
like(
	$result->output,
	'/^UNKNOWN - 1 plugins checked, 1 unknown \(killing_me_HUPly\) \[HUP generated at line 1 in.*\]\n'.
	'\[ 1\] killing_me_HUPly $/',
	"output correct - passed"
);
#-------------------------------------------------------------------------------
#--- output / head -------------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ procs ] = check_procs' -x 'output [ head ] = \"%.20s processes running\",(split(/\\s+/,\"\$procs\$\"))\[2\]' -r 1 $testopts",
);
is(
	$result->return_code, 
	0, 
	"custom output for header line - RC0 - passed"
);
like(
	$result->output,
	'/\\d+ processes running\n'.
	'\[ 1\] procs PROCS OK: \\d+ '.$procs_string.'$/',
	"output correct - passed"
);
#-------------------------------------------------------------------------------
#--- check_multi attribute -----------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ with_perfdata ] = echo \"eins\|eins=1\"' -x 'attribute [ with_perfdata::process_perfdata ] = 0' -r 9 $testopts",
);
is(
	$result->return_code, 
	0, 
	"changes child check attributes - RC0 - passed"
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] with_perfdata eins\|check_multi::check_multi::plugins=1 time=[\d\.]+ $/',
	"output correct - passed"
);
#-------------------------------------------------------------------------------
#--- check_multi cumulate ------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'cumulate [ procs ] = ps -axo \"user rss\"' $testopts",
);
is(
	$result->return_code, 
	0, 
	"cumulates data like top - RC0 - passed"
);
like(
	$result->output,
	'/OK - 5 plugins checked, 5 ok\n'.
	'\[ 1\] \S+ \d+\n'.
	'\[ 2\] \S+ \d+\n'.
	'\[ 3\] \S+ \d+\n'.
	'\[ 4\] \S+ \d+\n'.
	'\[ 5\] \S+ \d+\|'.
	'check_multi::check_multi::plugins=5 time=[\d\.]+ \S+::cumulate::\S+=\d+ \S+::cumulate::\S+=\d+ \S+::cumulate::\S+=\d+ \S+::cumulate::\S+=\d+ \S+::cumulate::\S+=\d+ $/',
	"output correct - passed"
);
