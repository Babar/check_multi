#! @PERL@ -w -I ..
#
# Process Tests via check_multi
# thanks to Ton Voon for his persistency on testing ;)
#

use strict;
use Test::More;
use NPTest;

my $t;

#--- add $libexec_dir to PATH to be sure that plugins will be called from libexec_dir
my $libexec_dir="@libexecdir@";
my $plugin_path="@plugin_path@";
$ENV{PATH}="$libexec_dir:$plugin_path:$ENV{PATH}";

#--- check needed plugins for tests
my @plugins=(
	"@PERL@",
);
foreach my $plugin (@plugins) {
	my $path_to_plugin=`which $plugin`; chomp $path_to_plugin;
	if (! -x "$path_to_plugin") {
		plan skip_all => "tests because component $plugin not found or not executable as \'$path_to_plugin\'";
	}
}
unless (eval "require XML::Simple;1") {
	plan skip_all => "tests because perl module XML::Simple not installed";
}
my $path_to_check_procs=`which check_procs`; chomp $path_to_check_procs;
my $procs_string="";
my $procs_warning="";
my $procs_output=`$path_to_check_procs -w 10`; chomp $procs_output;
if ($procs_output=~/PROCS (\S+): \d+ (\S+)/) {
        $procs_warning=$1;
        $procs_string=$2;
} else {
        plan skip_all => "tests because check_procs output ($procs_output) does not match pattern (PROCS (\\S+): \\d+ (\\s+))";
}

plan tests => 2;

my $result;
my $testopts="-s dont_be_paranoid=1";

#-------------------------------------------------------------------------------
#--- check_multi feeds check_multi ---------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -x 'command [ procs ] = check_procs' -r 256 $testopts | @PERL@ ../check_multi -r 1 $testopts",
);
is(
	$result->return_code, 
	0, 
	"feeds check_multi - RC0 - passed"
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] procs PROCS OK: \d+ '.$procs_string.'$/',
	"output correct - passed"
);
