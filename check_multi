#!/usr/bin/perl -w
# nagios: -epn
#
# check_multi - nagios plugin
#
# Copyright (c) 2007 Matthias Flacke (matthias.flacke at gmx.de)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#
# $Id$
#
use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
BEGIN { eval("use Time::HiRes qw(time)") }
use lib "/usr/local/nagios/libexec";
use vars qw(
$MYSELF %cmds $returncode %rc $no $VERSION
$OK $WARNING $CRITICAL $UNKNOWN
$DETAIL_LIST $DETAIL_LIST_FULL $DETAIL_HTML $DETAIL_STDERR $DETAIL_PERFORMANCE
$DETAIL_PERFORMANCE_CLASSIC $DETAIL_PNP_LINK $DETAIL_XML $DETAIL_NAGIOS2
);
#-------------------------------------------------------------------------------
#--- vars ----------------------------------------------------------------------
#-------------------------------------------------------------------------------
$MYSELF="check_multi";
$VERSION='$Revision$ $Date$ $Author$';
#
#--- RC defines
$OK=0;
$WARNING=1;
$CRITICAL=2;
$UNKNOWN=3;
#
#--- report defines
$DETAIL_LIST=1;
$DETAIL_HTML=2;
$DETAIL_STDERR=4;
$DETAIL_PERFORMANCE=8;
$DETAIL_LIST_FULL=16;
$DETAIL_PERFORMANCE_CLASSIC=32;
$DETAIL_PNP_LINK=128;
$DETAIL_XML=256;
$DETAIL_NAGIOS2=512;
#
#--- vars
$no=0;
%cmds=();
$returncode=0;
%rc=(
	label	=> { $OK => "OK", $WARNING => "WARNING", $CRITICAL => "CRITICAL", $UNKNOWN => "UNKNOWN", },
	code	=> { "OK" => $OK, "WARNING" => $WARNING, "CRITICAL" => $CRITICAL, "UNKNOWN" => $UNKNOWN, },
	s2r	=> { 0 => $OK, 2 => $WARNING, 3 => $CRITICAL, 1 => $UNKNOWN, },
	r2s	=> { $OK => 0, $WARNING => 2, $CRITICAL => 3, $UNKNOWN => 1, },
	count	=> { $OK => 0, $WARNING => 0, $CRITICAL => 0, $UNKNOWN => 0, },
	list	=> { $OK => [],$WARNING => [],$CRITICAL => [],$UNKNOWN => [], },
	expr	=> { $OK => "1", $WARNING => "COUNT(WARNING)>0", $CRITICAL => "COUNT(CRITICAL)>0", $UNKNOWN => "COUNT(UNKNOWN)>0" },
	match	=> { $OK => 0, $WARNING => 0, $CRITICAL => 0, $UNKNOWN => 0, },
	top	=> $OK,
	error	=> [ ],
	starttime => 0.0,
	endtime => 0.0,
	runtime => 0.0,
	nchecks => 0,
);

my %opt=(
	"filename"	=> [ ],
	"libexec"	=> "/usr/local/nagios/libexec",
	"name"		=> "",
	"report"	=> 13,
	"set"		=> {},
	"timeout"	=> 10,
	"TIMEOUT"	=> 60,
	"ok"		=> undef,
	"verbose"	=> 0,
	"warning"	=> undef,
	"critical"	=> undef,
	"unknown"	=> undef,
);
	
#-------------------------------------------------------------------------------
#--- subs ----------------------------------------------------------------------
#-------------------------------------------------------------------------------

sub process_parameters {

	if (! GetOptions(
		"f|filename=s"	=> \@{$opt{filename}},
		"h|help"	=> \$opt{help},
		"l|libexec=s"	=> \$opt{libexec},
		"n|name=s"	=> \$opt{name},
		"r|report:i"	=> \$opt{report},
		"t|timeout=i"	=> \$opt{timeout},
		"T|TIMEOUT=i"	=> \$opt{TIMEOUT},
		"v|verbose:+"	=> \$opt{verbose},
		"V|version"	=> \$opt{version},
		"set=s"		=> \%{$opt{set}},
		"o|O|ok=s"	=> \$opt{ok},
		"w|W|warning=s"	=> \$opt{warning},
		"c|C|critical=s"=> \$opt{critical},
		"u|U|unknown=s"	=> \$opt{unknown},)
	) {
		short_usage();
        	return $UNKNOWN;
	}
	*DEBUG1=($opt{verbose}>=1) ? \&debug_message : sub {};
	*DEBUG2=($opt{verbose}>=2) ? \&debug_message : sub {};
	*DEBUG3=($opt{verbose}>=3) ? \&debug_message : sub {};

	if ($opt{version}) {
		print "$MYSELF: v$VERSION\n";
        	return $UNKNOWN;
	}

	if ($opt{help}) {
		short_usage();
        	long_usage();
        	return $UNKNOWN;
	}

	if (! $opt{filename}[0]) {
        	print "$MYSELF error: no config file(s) specified\n";
		short_usage();
        	return $UNKNOWN;
	} else {
		#--- check if filenames are directories and replace with '*cmd' files
		for (my $i=0;$i<@{$opt{filename}}; $i++) {
		        splice(@{$opt{filename}},$i,1,glob "$opt{filename}[$i]/*cmd") if (-d $opt{filename}[$i]);
		}
	}
	if ($opt{report} & $DETAIL_PNP_LINK && !$opt{name}) {
		$opt{name}=$MYSELF;
		DEBUG1("process_parameters: PNP report option set and no name defined: taking $MYSELF as name");
	}
	if ($opt{ok}) {
		$rc{expr}{$OK}=$opt{ok};
	}
	if ($opt{warning}) {
		$rc{expr}{$WARNING}=$opt{warning};
	}
	if ($opt{critical}) {
		$rc{expr}{$CRITICAL}=$opt{critical};
	}
	if ($opt{unknown}) {
		$rc{expr}{$UNKNOWN}=$opt{unknown};
	}
	if ($opt{timeout} && $opt{TIMEOUT} && $opt{timeout} > $opt{TIMEOUT}) {
		print "$MYSELF: error - child timeout $opt{timeout}s must not be greater than parent timeout $opt{TIMEOUT}s\n";
		return $UNKNOWN;
	}
	foreach my $option (sort keys(%opt)) {
		DEBUG3("\$opt{$option}: $opt{$option}") if (defined($opt{$option}));
	}
	return $OK;
}

sub short_usage {
print <<SHORTEOF;
$MYSELF -f <config file> [-n name] [-t timeout] [-T TIMEOUT] [-r level] [-l libexec_path] [-s option=value]
        [-w <expr>] [-c <expr>] [-u <expr>] [-o <expr>]
$MYSELF [-h | --help]
$MYSELF [-v | --verbose]
$MYSELF [-V | --version]

SHORTEOF
}

sub long_usage {
print <<LONGEOF;
Options:
-f, --filename
   config file which contains commands to be executed
   multiple files can be specified serially
   if filename is a directory, all '.cmd' files will be taken
   (file format follows nrpe style: command[tag]=plugin command line)
-n, --name
   multi plugin name (shown in output), default: $opt{name}
-t, --timeout
   timeout for one command, default: $opt{timeout}
-T, --TIMEOUT
   TIMEOUT for all commands, default: $opt{TIMEOUT}
-r, --report <level>
   specify level of details in output (level is binary coded, just sum up all options)
   default: $opt{report}
        1: mention service names in plugin_output, e.g.
           "24 plugins checked, 1 critical (http), 0 warning, 0 unknown, 23 ok"
        2: add HTML coloring of output for extinfo
        4: show STDERR (if any) in each line of plugin output
        8: show performance data (with check_multi_style)
       16: show full list of states, normally '0 warning' is omitted
       32: show old type of performance data (without check_multi style)
      128: add PNP action link if performance data available
      256: XML: print structured XML output
      512: Nagios 2 compatibility: one summary line of output only
-s, --set <option>=<value>
   ignore_missing_cmd_file=(0|1) (don't complain if config file missing)	
-l, --libexec
   path to plugins, default: $opt{libexec}
-h, --help
   print detailed help screen
-v, --verbose
   prints debug output (multiple -v extend debug level) 
-V, --version
   print version information

Extended mode - specify extra settings for threshold interpretation:
-w, --warning  <expression>
-c, --critical <expression>
-u, --unknown  <expression>
-o, --ok       <expression>
LONGEOF

}

#---
#--- numerical sort
#---
sub numerically { $a <=> $b }

#---
#--- trim input string if found any chars from trim string
#---
sub mytrim {
	my ($src, $trim)=@_;
	return ($src=~/[$trim]*(.*)[$trim]*/) ? $1 : $src;
}

#---
#--- substitute macros a la $HOSTNAME$ from environment
#---
sub substitute_macros {
        my ($input)=@_;
        while ((my $var)=($input=~/\$([A-Za-z0-9^\$]+)\$/)) {
		DEBUG3("substitute_macros: var NAGIOS_${var} not defined") if (!defined($ENV{"NAGIOS_${var}"}));
		last if (!defined($ENV{"NAGIOS_${var}"}));
		DEBUG3("substitute_macros: replacing env var NAGIOS_${var} with $ENV{\"NAGIOS_${var}\"}");
                $input=~s/\$$var\$/$ENV{"NAGIOS_${var}"}/g;
        }
        return $input;
}

#---
#--- print debug message (see Macro DEBUG)
#---
sub debug_message {
	foreach (@_) {
		print "$_\n";
	}	
}

#---
#--- add error(s) to global error list
#---
sub add_error {
	push @{$rc{error}}, @_;
}

#---
#--- create unique tmpfile and try to create it
#---
sub get_tmpfile {
	my ($path,$prefix)=@_;
	my $attempt=0;
	my $tmpfile="";
	#--- check existance of path and create it if necessary
	if (! -d $path && ! mkdir($path,0700)) {
		add_error("get_tmpfile: error creating tmp_path $path:$!");
		return "";
	}
	#--- do 5 attempts to create tmpfile
	while ($attempt++ < 5) {
		my $suffix=int(rand(89999))+10000;
		$tmpfile="$path/$prefix.$suffix";
		next if (-f $tmpfile);
		if (open(TMP,">$tmpfile")) {
			close TMP;
			DEBUG3("get_tmpfile: created $tmpfile");
			return $tmpfile;
		}
	}
	add_error("get_tmpfile: giving up opening $tmpfile after $attempt attempts:$!");
	return "";
}

#---
#--- read file and return its contents
#---
sub readfile {
	my ($filename)=@_;
	open(FILE,$filename) || add_error("readfile: error opening $filename:$!") && return "";
	my @lines=<FILE>;
	close(FILE);
	return join("", @lines);
}

#---
#--- parse command file and fill %cmds structure
#---
sub parse_commands {
	my ($filenames)=@_;	# allow multiple filenames (array reference)
	my $cmd_count=0;	# count stored commands
	my ($cmd,$type,$name,$plugin,$expr,$lineno,$i);

	#--- loop over filenames
	foreach my $filename (@{$filenames}) {

		if (!open(FILE, $filename)) {
			next if ($opt{set}{ignore_missing_cmd_file});
			add_error("parse_command: cannot open config file $filename: $!");
			$rc{top}=$UNKNOWN;
			next;
		}
		DEBUG2("-" x 80);
		DEBUG2("parse_commands: parsing file $filename");
		DEBUG2("-" x 80);
	
		$lineno=0;	# count sourcefile lines

		#--- be liberate about tags - if they're duplicate, don't bother: it's up to the user
		while (<FILE>) {
			$lineno++;		
			next if (/^\s*$/);	# skip empty lines
			next if (/^\s*#/);	# skip comments
		
			chop($cmd=$_);
	
			#--- format: 'command[ tag ] = plugin command line'
			if ($cmd=~/\s*(command)\s*\[\s*(\S+)\s*\]\s*=\s*(.*)\s*/i) {
				$type=lc($1);
				$name=$2;
				$cmd=$3;
				$plugin=(split(/\s+/,"$cmd"))[0];
				$cmd="$opt{libexec}/$cmd" if ($plugin!~/\//);
				#--- find plugin with same name
				if ($type eq "command") {
					for ($i=1; $i<=scalar(keys(%cmds));$i++) {
						last if ($cmds{$i}{name} eq $name);
					}
					if ($cmds{$i}{command}) {
						DEBUG2("parse_commands: overloaded $name with command \'$cmd\'");
					} else {
						DEBUG2("parse_commands: added $name with command \'$cmd\'");
					}
				}
				#--- store vars into cmds structure
				$cmds{$i}{command}=$cmd;
				$cmds{$i}{type}=lc($type);
				$cmds{$i}{plugin}=$plugin;
				$cmds{$i}{name}=$name;
				$cmds{$i}{rc}=$UNKNOWN;
				$cmd_count=scalar(keys(%cmds));

			#--- format: 'state [ tag ] = (EXPR)
			} elsif ($cmd=~/\s*state\s*\[\s*(\S+)\s*\]\s*=\s*(.*)\s*/i) {
				$name=uc($1);
				$expr=$2;
				if (!defined($rc{code}{$name})) {
					add_error("parse_command: invalid state code specified in line $lineno: $name");
					next;
				}
				# store state expression only if NOT set via commandline
				if (!defined($opt{lc($name)})) {
					DEBUG2("parse_commands: added state{$rc{code}{$name}} expression: $expr");
					$rc{expr}{$rc{code}{$name}}=$expr; 
				} else {
					DEBUG2("parse_commands: cmdline precedence over state expression. Using \$opt{$name}: $opt{$name}");
				}
			} else {
				add_error("parse_command: invalid format in line $lineno: $cmd");
				next;
			}
		}
		close FILE;
	}
	return $cmd_count;
}

#---
#--- execute command number $no from %cmds
#---
sub exec_command {
	my ($no)=@_;
	my $tmp_stdout="";
	my $tmp_stderr="";

	#--- execute command with alarm timer to catch timeouts
	$SIG{'ALRM'} = sub { die "timeout" };

	#--- at runtime: substitute $MACRO$ macros
	$cmds{$no}{command}=substitute_macros($cmds{$no}{command});

	#--- measure command runtime;
	my $cmd_start=time;

	eval {
		alarm($opt{timeout});

		#--- prepare tmpfiles for stdout and stderr
		$tmp_stdout=&get_tmpfile("/tmp", "${MYSELF}_stdout_$$");
		$tmp_stderr=&get_tmpfile("/tmp", "${MYSELF}_stderr_$$");

		#--- execute command and store stdout/stderr/return code
		`$cmds{$no}{command} 1>$tmp_stdout 2>$tmp_stderr`;
		$cmds{$no}{rc}=$? >> 8;

		#--- store stdout/stderr and cleanup tmpfiles
		$cmds{$no}{output}=readfile($tmp_stdout);
		$cmds{$no}{stderr}=readfile($tmp_stderr);
		unlink $tmp_stdout, $tmp_stderr;
		chomp $cmds{$no}{output};	
		chomp $cmds{$no}{stderr};

		#--- unknown return code? change it explicitly to UNKNOWN
		if (! defined($rc{r2s}{$cmds{$no}{rc}})) {
			$cmds{$no}{stderr}.=" RC was $cmds{$no}{rc}!";
			$cmds{$no}{rc}=$UNKNOWN;
		}
		
		#--- remove white chars from output
		#$cmds{$no}{output}=mytrim($cmds{$no}{output},"\\n\\s");
		$cmds{$no}{stderr}=mytrim($cmds{$no}{stderr},"\\n\\s");

		#--- split performance data from standard output
		if ($cmds{$no}{output}=~/\|/) {
			($cmds{$no}{output},$cmds{$no}{performance})=split(/\|/,$cmds{$no}{output});
			$cmds{$no}{performance}=mytrim($cmds{$no}{performance},"\\s");
		}

		alarm(0);
	};
	$cmds{$no}{runtime}=time-$cmd_start;
	
	#--- any oddities during command execution?
	if ($@) {
		#--- timeout encountered: store status
		if ($@ =~ /timeout/) {
			$cmds{$no}{output}="UNKNOWN - $cmds{$no}{plugin} cancelled after timeout ($opt{timeout}s)";
			$cmds{$no}{rc}=$UNKNOWN;
			$cmds{$no}{output}.=readfile($tmp_stdout);
			$cmds{$no}{stderr}.=readfile($tmp_stderr);
		#--- catchall for unknown errors
		} else {
			alarm(0);
       			die "$MYSELF: unexpected exception encountered:$!";
		}
		unlink $tmp_stdout, $tmp_stderr;
	} else {
		$ENV{"NAGIOS_".$cmds{$no}{name}}="$cmds{$no}{output}";
	}
	return $cmds{$no}{rc};
}

sub eval_result {
        my ($input)=@_;

        my $input_org=$input;
        my $message="";

	
 	#--- at runtime: substitute $MACRO$ macros
        $input=substitute_macros($input);

        # 1. replace COUNT(WARNING)
        $input=~s/\bCOUNT\s*\(\s*(OK)\s*\)/$rc{count}{$OK}/ig;
        $input=~s/\bCOUNT\s*\(\s*(WARNING)\s*\)/$rc{count}{$WARNING}/ig;
        $input=~s/\bCOUNT\s*\(\s*(CRITICAL)\s*\)/$rc{count}{$CRITICAL}/ig;
        $input=~s/\bCOUNT\s*\(\s*(UNKNOWN)\s*\)/$rc{count}{$UNKNOWN}/ig;

        # 2. replace all STATES (OK)
        $input=~s/\b(OK)\b/$OK/ig;
        $input=~s/\b(WARNING)\b/$WARNING/ig;
        $input=~s/\b(CRITICAL)\b/$CRITICAL/ig;
        $input=~s/\b(UNKNOWN)\b/$UNKNOWN/ig;

        # 3. replace all vars with RC
        foreach my $no (sort keys(%cmds)) { 
                $input=~s/\b($cmds{$no}{name})\b/$cmds{$no}{rc}/ig;
        }

        #--- evaluate expression
        my $result=eval "($input)";

        #--- catch error
        if ($@) {
                $message="Evaluation error in \'$input_org\': $@\n";
                $message=~s/\n/ /g;
                return (-1,$message);
        #--- return result
        } else {
                $message="eval_result: input:\'$input_org\' parsed:\'$input\' result:\'$result\'\n";
                $message=~s/\n/ /g;
		DEBUG2($message);
                return ($result,$message);
        }
}

#---
#--- calculate sums from %cmds and %rc
#---
sub result_rating {

	#--- measure runtime without reporting ;-)
	$rc{runtime}=time - $rc{starttime};
	$rc{nchecks}=scalar(keys(%cmds));

	#--- count return codes
	foreach $no (sort numerically keys %cmds) {
		$rc{count}{$cmds{$no}{rc}}++;	# count return codes
		push @{$rc{list}{$cmds{$no}{rc}}},$cmds{$no}{name}; # add plugin to list
	}
	
	foreach my $s (sort numerically keys %{$rc{s2r}}) {
		#print "Performing $rc{label}{$s}\n";
		
		my $state=$rc{s2r}{$s};
		
        	my ($result,$message)=eval_result($rc{expr}{$state});
		#print "result:$result ref(result):".ref($result)." message:$message\n";
        	if (! defined($result) || $result eq "") {
                	#print "NO: $message\n";
        	} elsif ($result < 0) {
                	add_error("result_rating: parsing error ($message)");
        	} else {
			$rc{match}{$state}=1;
			$rc{top}=$state;
			#print "YES: $rc{label}{$state} matches, $message TOP:$rc{top}\n";
		}
	}
}

#---
#--- report results stored in %cmds
#---
sub report {

	if ($opt{report} & $DETAIL_NAGIOS2) {
		print "$opt{name} " if $opt{name};
		print "$rc{label}{$rc{top}}";
	} else {
		#--- print header line (1): name, state, number of plugins
		print "$opt{name} " if $opt{name};
		print "$rc{label}{$rc{top}} - " . keys(%cmds) . " plugins checked, ";
	
		#--- print header line (2): summary for particular states 
		if ($opt{report} & $DETAIL_LIST_FULL) {
			print	"$rc{count}{$CRITICAL} critical" . ((@{$rc{list}{$CRITICAL}}) ? " (" . join(', ',@{$rc{list}{$CRITICAL}}) . ')' : "") . ", " .
				"$rc{count}{$WARNING} warning"   . ((@{$rc{list}{$WARNING}})  ? " (" . join(', ',@{$rc{list}{$WARNING}})  . ')' : "") . ", " .
				"$rc{count}{$UNKNOWN} unknown"   . ((@{$rc{list}{$UNKNOWN}})  ? " (" . join(', ',@{$rc{list}{$UNKNOWN}})  . ')' : "") . ", " .
				"$rc{count}{$OK} ok";
		} elsif ($opt{report} & $DETAIL_LIST) {
			my @r=();
			push @r, "$rc{count}{$CRITICAL} critical (" . join(', ',@{$rc{list}{$CRITICAL}}) . ")" if (@{$rc{list}{$CRITICAL}});
			push @r, "$rc{count}{$WARNING} warning ("   . join(', ',@{$rc{list}{$WARNING}})  . ")" if (@{$rc{list}{$WARNING}});
			push @r, "$rc{count}{$UNKNOWN} unknown ("   . join(', ',@{$rc{list}{$UNKNOWN}})  . ")" if (@{$rc{list}{$UNKNOWN}});
			push @r, "$rc{count}{$OK} ok" if (@{$rc{list}{$OK}});
			print join(", ", @r);
		} else {
			print	"$rc{count}{$CRITICAL} critical, " .
				"$rc{count}{$WARNING} warning, " .
				"$rc{count}{$UNKNOWN} unknown, " .
				"$rc{count}{$OK} ok";
		}
	}
	#--- print general errors if any occured
	print " [" . join(", ",@{$rc{error}}) . "]" if (defined($rc{error}[0]));
	
	#--- loop over commands: report particular results for long plugin output
	foreach $no (sort numerically keys %cmds) {

		#--- if NAGIOS2 output: skip $OK results
		if ($opt{report} & $DETAIL_NAGIOS2) {
			next if ($cmds{$no}{rc} == $OK);
			$cmds{$no}{output}=~s/\n//g;
			$cmds{$no}{stderr}=~s/\n//g;
			printf ", %s %s%s",
				$cmds{$no}{name},
				$cmds{$no}{output},
				(defined($cmds{$no}{stderr}) && $cmds{$no}{stderr} ne "" && $opt{report} & $DETAIL_STDERR) ?
			 	" [ STDERR: " . $cmds{$no}{stderr} . ']' : "";
		} else {
			printf "%s[%2.d] %s %s%s",
				($opt{report} & $DETAIL_NAGIOS2) ? ", " : "\n",
				$no,
				$cmds{$no}{name},
				$cmds{$no}{output},
				(defined($cmds{$no}{stderr}) && $cmds{$no}{stderr} ne "" && $opt{report} & $DETAIL_STDERR) ?
			 	" [ STDERR: " . $cmds{$no}{stderr} . ']' : "";
		}
	}

	#--- print list of commands
	DEBUG1("\n","-" x 80);
	DEBUG1("Commands executed:");
	DEBUG1("-" x 80);
	foreach $no (sort numerically keys %cmds) {
		DEBUG1(sprintf "[%2.d] %s", $no, $cmds{$no}{command});
	}

	#--- print list of commands
	DEBUG1("\n","-" x 80);
	DEBUG1("Command runtime:");
	DEBUG1("-" x 80);
	foreach $no (sort numerically keys %cmds) {
		DEBUG1(sprintf "[%2.d] %-20s %6.4fs", $no, $cmds{$no}{name}, $cmds{$no}{runtime});
	}

	#--- print state settings and RC evaluation result
	DEBUG1("\n","-" x 80);
	DEBUG1(sprintf "%-8s %-40s %s", "State","Expression","Evaluates to");
	DEBUG1("-" x 80);
	foreach my $s (sort numerically keys %{$rc{s2r}}) {
		DEBUG1(sprintf "%-8s %-40s %d", $rc{label}{$rc{s2r}{$s}}, $rc{expr}{$rc{s2r}{$s}}, $rc{match}{$rc{s2r}{$s}});
	}
	DEBUG1(sprintf "%8s %40s %s", "", "Overall state =>", $rc{label}{$rc{top}});

	#--- final '\n' - dedicated to Wolfgang Barth ;-)
	print "\n" if (!($opt{report} & $DETAIL_NAGIOS2));
}

sub report_html {
	#--- print header line (1): name, state, number of plugins
	printf "$opt{name} " if $opt{name};
	print "$rc{label}{$rc{top}} - " . keys(%cmds) . " plugins checked, ";

	#--- print header line (2): summary for particular states 
	if ($opt{report} & $DETAIL_LIST_FULL) {
		print	"$rc{count}{$CRITICAL} critical" . ((@{$rc{list}{$CRITICAL}}) ? " (" . join(', ',@{$rc{list}{$CRITICAL}}) . ')' : "") . ", " .
			"$rc{count}{$WARNING} warning"   . ((@{$rc{list}{$WARNING}})  ? " (" . join(', ',@{$rc{list}{$WARNING}})  . ')' : "") . ", " .
			"$rc{count}{$UNKNOWN} unknown"   . ((@{$rc{list}{$UNKNOWN}})  ? " (" . join(', ',@{$rc{list}{$UNKNOWN}})  . ')' : "") . ", " .
			"$rc{count}{$OK} ok";
	} elsif ($opt{report} & $DETAIL_LIST) {
		my @r=();
		push @r, "$rc{count}{$CRITICAL} critical (" . join(', ',@{$rc{list}{$CRITICAL}}) . ")" if (@{$rc{list}{$CRITICAL}});
		push @r, "$rc{count}{$WARNING} warning ("   . join(', ',@{$rc{list}{$WARNING}})  . ")" if (@{$rc{list}{$WARNING}});
		push @r, "$rc{count}{$UNKNOWN} unknown ("   . join(', ',@{$rc{list}{$UNKNOWN}})  . ")" if (@{$rc{list}{$UNKNOWN}});
		push @r, "$rc{count}{$OK} ok" if (@{$rc{list}{$OK}});
		print join(", ", @r);
	} else {
		print	"$rc{count}{$CRITICAL} critical, " .
			"$rc{count}{$WARNING} warning, " .
			"$rc{count}{$UNKNOWN} unknown, " .
			"$rc{count}{$OK} ok";
	}
	print "\n";

	#--- print general errors if any occured
	print " [" . join(", ",@{$rc{error}}) . "]" if (defined($rc{error}[0]));
	
	#--- loop over commands: report particular results for long plugin output
	print "<table style='border-left-width:1px; border-left-style:dotted' border-right-width:0px; >";
	foreach $no (sort numerically keys %cmds) {
		print "<tr valign='top'>";
		printf "<td nowrap>%s&nbsp;%2.d&nbsp;%s</td>", 
			($opt{report} & $DETAIL_HTML) ? "<DIV CLASS=\'service$rc{label}{$cmds{$no}{rc}}\' style='font-size:7pt'>" : "",
			$no,
			($opt{report} & $DETAIL_HTML) ? "</DIV>" : "";
		if (	$opt{report} & $DETAIL_PERFORMANCE &&
			$opt{report} & $DETAIL_PNP_LINK && 
			defined($cmds{$no}{performance}) ) {

			printf "<td nowrap>%s</td>", 
				"<A HREF='/nagios/pnp/index.php?host=$ENV{NAGIOS_HOSTNAME}&srv=$cmds{$no}{name}' TARGET='_self'>" . 
				"<img src='/nagios/images/action.gif' width=20 height=20 border=0 align=top alt='Show PNP chart for $ENV{NAGIOS_HOSTNAME} / $cmds{$no}{plugin}'></A>";
		} else {
			printf "<td></td>";
		}
		printf "<td>&nbsp;&nbsp;%s</td>", ($cmds{$no}{name}) ? $cmds{$no}{name} : "";
		printf "<td>%s</td>", ($cmds{$no}{output}=~/([^\n]*)\n(.*)/i) ? "$1</tr><tr><td></td><td colspan='10'>$2" : $cmds{$no}{output};
		if (	defined($cmds{$no}{stderr}) && 
			$cmds{$no}{stderr} ne "" && 
			$opt{report} & $DETAIL_STDERR) {

			print " [ STDERR: " . $cmds{$no}{stderr} . "]";
		}
		print "</tr>";
	}
	print "</table>";

}

sub report_xml {
	print "<!--\n" if ($opt{report} & $DETAIL_HTML);
	print "<xml>\n";
	print "<meta http-equiv=\"Content-Style-Type\" content=\"application/xml\">\n";
	print "<?xml version=\"1.0\"?>\n";
	print "<?xml-stylesheet type=\"text/xsl\" href=\"http://localhost/nagios/extinfo.xsl\"?>\n";
	print "<PARENT name=\"$opt{name}\" plugins=\"$rc{nchecks}\" time=\"$rc{runtime}\">\n";
	print "\t<output>";
	#--- print header line (2): summary for particular states 
        if ($opt{report} & $DETAIL_LIST_FULL) {
                print   "$rc{count}{$CRITICAL} critical" . ((@{$rc{list}{$CRITICAL}}) ? " (" . join(', ',@{$rc{list}{$CRITICAL}}) . ')' : "") . ", " .
                        "$rc{count}{$WARNING} warning"   . ((@{$rc{list}{$WARNING}})  ? " (" . join(', ',@{$rc{list}{$WARNING}})  . ')' : "") . ", " .
                        "$rc{count}{$UNKNOWN} unknown"   . ((@{$rc{list}{$UNKNOWN}})  ? " (" . join(', ',@{$rc{list}{$UNKNOWN}})  . ')' : "") . ", " .
                        "$rc{count}{$OK} ok";
        } elsif ($opt{report} & $DETAIL_LIST) {
                my @r=();
                push @r, "$rc{count}{$CRITICAL} critical (" . join(', ',@{$rc{list}{$CRITICAL}}) . ")" if (@{$rc{list}{$CRITICAL}});
                push @r, "$rc{count}{$WARNING} warning ("   . join(', ',@{$rc{list}{$WARNING}})  . ")" if (@{$rc{list}{$WARNING}});
                push @r, "$rc{count}{$UNKNOWN} unknown ("   . join(', ',@{$rc{list}{$UNKNOWN}})  . ")" if (@{$rc{list}{$UNKNOWN}});
                push @r, "$rc{count}{$OK} ok" if (@{$rc{list}{$OK}});
                print join(", ", @r);
        } else {
                print   "$rc{count}{$CRITICAL} critical, " .
                        "$rc{count}{$WARNING} warning, " .
                        "$rc{count}{$UNKNOWN} unknown, " .
                        "$rc{count}{$OK} ok";
        }
	print "</output>\n";
	print "<error>" . join(", ",@{$rc{error}}) . "</error>\n" if (defined($rc{error}[0]));

	foreach $no (sort numerically keys %cmds) {
		printf "\t<CHILD no=\"$no\">\n";
		foreach my $token ("name","rc","output","stderr","plugin","command","performance") {
			printf "\t\t<%s>%s</%s>\n",$token,$cmds{$no}{$token},$token if defined($cmds{$no}{$token});
		}
		printf "\t</CHILD>\n";
	}
	print "</PARENT>\n";
	print "</xml>\n";
	print "\n--> " if ($opt{report} & $DETAIL_HTML);
}

sub report_perfdata {
	#--- report performance data?
	if ($opt{report} & $DETAIL_PERFORMANCE) {
		printf "\|%s::%s::plugins=%d time=%.2f ",
			($opt{name}) ? $opt{name} : $MYSELF,
			$MYSELF, scalar(keys(%cmds)), time - $rc{starttime};
		#--- one line per command, format: tag=output
		foreach $no (sort numerically keys %cmds) {
			if (defined($cmds{$no}{performance})) {
				#--- prevent concatenation of multi-labels if called recursively
				if ($cmds{$no}{performance}=~/::.*::/) {
					print "$cmds{$no}{name}$cmds{$no}{performance} ";
				} else {
					print "$cmds{$no}{name}::$cmds{$no}{plugin}::$cmds{$no}{performance} ";
				}
			}
		}
	} elsif ($opt{report} & $DETAIL_PERFORMANCE_CLASSIC) {
		printf "\|";
		#--- one line per command, format: tag=output
		foreach $no (sort numerically keys %cmds) {
			print "$cmds{$no}{performance} " if (defined($cmds{$no}{performance}));
		}
	}
	#--- final '\n' - dedicated to Wolfgang Barth ;-)
	print "\n" if (!($opt{report} & $DETAIL_NAGIOS2));
}

#-------------------------------------------------------------------------------
#--- main ----------------------------------------------------------------------
#-------------------------------------------------------------------------------

#--- parse command line options
exit $UNKNOWN if (&process_parameters != $OK);

#--- don't run this as root ;-)
DEBUG3("Userid: $>");
add_error("please don't run plugins as root!") if ($> == 0);

#--- parse command file (nrpe format)
&parse_commands($opt{filename});

#--- initialize timer for overall timeout
$rc{starttime}=time;
$rc{endtime}=$rc{starttime} + $opt{TIMEOUT};

#--- loop over commands in order of config file
foreach $no (sort numerically keys %cmds) {
	
	#--- if total timeout is going to be exceeded, cancel next commands
	if (time + $opt{timeout} > $rc{endtime}) {
		$cmds{$no}{output}="UNKNOWN - execution cancelled after global timeout ($opt{TIMEOUT}s)";
		$cmds{$no}{rc}=$UNKNOWN;
		$rc{count}{$UNKNOWN}++;
		push @{$rc{list}{$UNKNOWN}},$cmds{$no}{name};
		next;
	}
		
	#--- execute command
	&exec_command($no);
}

#--- prepare output
&result_rating;

#--- classical report
if (! ($opt{report} & $DETAIL_HTML)) {
	&report;
}
#--- report HTML output
if ($opt{report} & $DETAIL_HTML) {
	&report_html;
}
#--- need XML data
if ($opt{report} & $DETAIL_XML) {
	&report_xml;
}

#--- at last: perfdata
&report_perfdata;

#--- return rc with highest severity
exit $rc{top};
