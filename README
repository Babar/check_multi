
check_multi README
------------------
Nagios 3.x plugin

What is check_multi?
--------------------
check_multi is kind of a wrapper plugin which takes benefit of the 
Nagios 3.x capability to display multiple lines of plugin output. 
It calls multiple child plugins and displays their output in the 
long_plugin_output. A summary is given in the standard plugin output.
The child return code with the highest severity becomes the parent 
(check_multi) plugin return code.

The configuration is very simple: a NRPE-stylish config file contains 
a tag for each child plugin and then the check command line. 


Discussion
----------
The new Nagios 3.x multiline output feature allows to combine multiple
service checks in one run. There are lots of advantages for this:

1. Performance boost: the Nagios server is no more dealing with 
   multiple checks and can bear a lot of more servers to monitor. 
   The author has got pretty good performance with 500 servers and 
   20000 child checks on a single HP DL 380.  

2. Configuration delegation: the complicated Nagios core configuration 
   is still be done by the experienced Nagios admin while the gory 
   threshold tuning can be delegated to the system or Oracle or 
   webserver teams.
   More: the configuration of the plugin can be changed without
   restarting Nagios. It will freshly read before each run.

3. Ease of configuration: There's no need to setup a sophisticated 
   distributed monitoring any more if all hosts can be monitored on 
   one server.

4. Compliancy: The plugin is fully compliant to the Nagios plug-in 
   development guidelines and behaves like just any other plugin.

But there are are also some disadvantages:

1. No Nagios 2.x. It will run anyway, but you won't see very much...

2. Only the parent plugin is visible in Nagios context: this means
   that there is only one notification, one escalation logic a.s.o.

3. The length of the long_plugin_output is limited by several pre-
   compile options (see config.h). But even if these buffers are
   extended there is one hard limit at the moment: the maximum 
   buffer size transported by NRPE with SSL support. This is on a 
   linux box at the moment around 4K (4096 bytes - SSL overhead).


Download
--------
SVN repository at http://svn.process-zero.de/repos/check_multi:
$svn co http://svn.process-zero.de/repos/check_multi/tags/current


Installation
------------
Up to now there is no 'configure' available, so please just copy your 
'check_multi' into your plugin directory and start playing with the
contributed 'check_multi.cmd' config file. That's it.
If you seriously intend to use it ;-), first take into account that 
both is really alpha software, especially check_multi. If you still
want to try it, please also read the buffer limit section below.
The buffer issue will also appear in NRPE compilation (see NRPE 
section).


Options
-------
Usage:
check_multi -f <config file> [-l libexec_path] [-n name] [-t timeout] 
   [-T TIMEOUT] [-r level]
check_multi [-h | --help]
check_multi [-V | --version]

Options:
-f, --filename
   config file which contains commands to be executed
   (file format follows nrpe style: command[tag]=plugin command line)

   See special section for this config file and compare the sample
   config file in the contrib directory

-l, --libexec
   path to plugins, default: /usr/local/nagios/libexec

   In a future version this default (and the others) can be set 
   using configure

-n, --name
   multi plugin name (shown in output), default: MULTI

   This option can be used e.g. do do some reasonable tagging, e.g.
   SYSTEM, ORACLE, WEB etc.

-t, --timeout
   timeout for one command, default: 10

   This option defines the timeout for a child plugin. 10 seconds is
   a often used default in Nagios plugins. Normally it does not have 
   to be changed.

-T, --TIMEOUT
   TIMEOUT for all commands, default: 60

   This value (BIG T stands for the parent plugin, small t for the 
   child plugins, don't mix them) limits the overall plugin runtime.
   Please note that Nagios itself has a timeout threshold for its
   service checks (service_check_timeout=60). After this timeout 
   Nagios kills the service check. If you specify a greater timeout
   for the check_multi (BIG T), you consequently have to increase 
   the nagios value for service_check_timeout accordingly.

   The overall timeout (BIG T) provides a proper cancelling handling
   for the child plugins: if the parent plugin notices that a child
   plugin with its (small t) timeout extends the overall (BIG T) 
   timeout, it does not execute it and reports this with the message
   "plugin cancelled due to global timeout". The child plugin gets
   the return code "UNKNOWN"
   This mimic ensures the proper runtime of the parent plugin and 
   a (at least UNKNOWN) result for all plugins.

-r, --report <level>
   specify level of details in output (level is binary coded, just add 
   all options)
   default: 15
      1: mention service names in plugin_output, e.g.
         "24 plugins checked, 1 critical (http), 0 warning, 0 unknown, 23 ok"
      2: show STATE in front of each line of plugin output, e.g.
         "[16] OK system_ssh - SSH OK - OpenSSH_4.4 (protocol 1.99)"
      4: show STDERR (if any) in each line of plugin output
      8: show performance data

    This option provides a means to influence some details of output.

-h, --help
   print detailed help screen
-V, --version
   print version information


Nagios configuration example
----------------------------

define service { 
   name                 multi-service
   use                  generic-service
   check_command        check_multi!/usr/local/nagios/etc/check_multi.cmd
   service_description  check_multi_test
   host_name            localhost
}

define command {
   command_name         check_multi
   command_line         $USER1$/check_multi -f $ARG1$
}


Prerequisite: buffer size in nagios
-----------------------------------
Please increase your buffer limits and compile a new
nagios version (3.0a4 and above) following Ethans
statements from the Nagios 3.x documentation:
(http://nagios.sourceforge.net/docs/3_0/pluginapi.html)

> Plugin Output Length Restrictions
> 
> Nagios will only read the first 4 KB of data that a plugin returns. 
> This is done in order to prevent runaway plugins from dumping megs 
> or gigs of data back to Nagios. This 4 KB output limit is fairly 
> easy to change if you need. Simply edit the value of the
> MAX_PLUGIN_OUTPUT_LENGTH definition in the include/nagios.h.in file 
> of the source code distribution and recompile Nagios. There's 
> nothing else you need to change! 


NRPE
----
As already said, check_multi is just a normal plugin and can be called via
NRPE like all other plugins. One remark: you also have to change the buffer
sizes in common.h MAX_INPUT_BUFFER and MAX_PACKETBUFFER_LENGTH. 
Caveat: SSL implementation in NRPE only supports one buffer send per 
communication, and this is limited by PIPE_BUF (4096 bytes on Linux systems).


Contributions
-------------
In the contrib directory you find

1. check_multi.cmd
   This file is a sample config file to play with and get first experiences,
   practice is sometimes better than too much documentation. And you will 
   soon get some CRITICAL, WARNING and UNKNOWN results, just like in real
   life ;-)

2. service_notification.template
   This file can be used as a replacement for the standard notification cmd.
   Please copy it into your libexec dir and replace the corresponding 
   notify-service-by-email setting in your commands.cfg with the following 
   lines:

# 'notify-service-by-email' command definition 
define command {
   command_name         notify-service-by-email
   command_line         /bin/sh /usr/local/nagios/libexec/service_notification.template | /usr/bin/mail -s "$NOTIFICATIONTYPE$ Service Alert: $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$" $CONTACTEMAIL$
}

Feedback and help
-----------------
Questions and comments are always welcome at 
(matthias.flacke_at_stiegemeyer.de)


Last modified
-------------
$Date$
