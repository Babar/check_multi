1. Beschreibung
===============

check_multi ist ein Wrapper-Plugin f√ºr Nagios, das andere Plugins 
aufruft. Die Ergebniszeilen dieser Plugins werden zusammengefasst, 
und der Returncode mit der groessten Severity ist auch der Returncode 
des Wrapper-Plugins.

2. Hintergrund
==============

Nagios 3 kann nicht nur eine, sondern mehrere Zeilen Plugin-Output 
verarbeiten. Damit ist es moeglich, die Ergebnisse von vielen 
Service-Checks zu sammeln und in einem gemeinsamen Service zu 
verarbeiten. 

Dies hat Vorteile auf der Performanceseite, so lassen sich mit 
einem einzelnen Nagios-Server problemlos 20000 Checks auf 500 Hosts 
auswerten. 

Ausserdem kann so eine Trennung der Nagios-Konfiguration in einen 
Kern-Bereich und einen Service-Bereich umgesetzt werden. Damit 
koennen einzelne Administratoren-Gruppen fuer ihre Konfigurationen 
selber verantwortlich sein, waehrend der Betrieb des Nagios-Servers 
selber in der Verantwortung der Nagios-Spezialisten liegt.

3. Konfiguration
================

In einer an die nrpe.cfg angelehnten Konfigurationsdatei werden die 
einzelnen Plugin-Aufrufe definiert:

- 8< -----------------------------------------------------------
# multi.cmd
#
command[ system_load ]          = check_load -w 5,4,3 -c 10,8,6
command[ system_rootdisk ]      = check_disk -w 5% -c 2% -p /
command[ system_swap ]          = check_swap -w 90 -c 80
command[ system_syslog ]        = check_file_age -f /var/log/messages -c 86400 -C 0
- 8< -----------------------------------------------------------


- 8< -----------------------------------------------------------
# multi.cfg
#
define command{
        command_name    check_multi
        command_line    $USER1$/check_multi -f $ARG1$
}
#
define service{
        use                             local-service
	name				check_multi
	host_name			localhost
        service_description             System_checks
	check_command                   check_multi!/usr/local/nagios/etc/multi.cmd
}
- 8< -----------------------------------------------------------


4. Diskussion Vorteile / Nachteile
==================================

- Der kombinierte Aufruf vieler Plugins auf dem zu monitorenden Host 
  verlagert einen Gutteil der Arbeit vom Nagios-Server auf den Client.
  Damit kann der Nagios-Server viel mehr Clients monitoren als in der
  klassischen Variante. 
  500 Clients mit jeweils 40 Checks wuerden normalerweise eine Infrastruktur
  von mindestens 6 - 10 Servern bedeuten, kann jetzt aber problemlos auf 
  einem Server betrieben werden. Das spart Kosten und Administrationsaufwand.

- Konfiguration und Betrieb sind aus vielen Gruenden einfacher:

  a. Verteiltes Monitoring kann wegfallen

     Verteiltes Monitoring bedeutet immer zusaetzlichen Aufwand fuer 
     die Verteilung der Hosts auf die Satelliten. Ausserdem ist die 
     Infrastruktur durch die NSCA-Kommunikation zusaetzlich kompliziert
     und es entstehen neue Fehlerquellen. Durch die viel geringere Zahl
     an Service-Checks kann in den meisten Umgebungen mit einem einzelnen
     Nagios-Server gearbeitet werden. Die Implementierung von HA bzw. 
     redundantem Monitoring bleibt davon unberuehrt.

  b. Die Konfiguration des Plugins mit seinen Unterchecks kann getrennt 
     vom Nagios-Server erfolgen.

     Dadurch erhaelt man zwei Vorteile
     - Organisatorische Trennung moeglich: Verschiedene Administratoren-
       gruppen koennen dezentral ihr Server-/Applikationsmonitoring selber
       konfigurieren und organisieren. Fuer Aenderungen ist kein Nagios-
       Neustart mehr erforderlich.
     - Die komplizierte Konfiguration des Nagios-Servers kann in der Hand
       von Spezialisten bleiben, waehrend die einfache Konfiguration des
       Multi-Plugins vom einzelnen Administrator auf dem Client getestet
       und veraendert werden kann.









Aufruf
======

check_multi -f <config file> [-l libexec_path] [-n name] [-t timeout] [-o overall] [-p] [-d level]
check_multi [-h | --help]
check_multi [-V | --version]


Options:
-f, --filename
   config file which contains commands to be executed
   (file format follows nrpe style)
-l, --libexec
   path to plugins, default: /usr/local/nagios/libexec
-n, --name
   plugin name (shown in output), default: MULTI
-o, --overall
   timeout for all commands, default: 60
-p, --performance
   gather performance data, default: no
-t, --timeout
   timeout for one command, default: 10
-v, --verbose <level>
   specify level of details in output (level is binary coded)
   default: 1
      1: show STATE in front of each line of plugin output
         "[16] OK system_ssh - SSH OK - OpenSSH_4.4 (protocol 1.99)"
      2: mention service names in plugin_output, e.g. 
         "24 plugins checked, 1 critical (http), 0 warning, 0 unknown, 23 ok"
-h, --help
   print detailed help screen
-V, --version
   print version information
